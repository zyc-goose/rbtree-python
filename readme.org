* RBTree - A Python implementation of red-black tree

** Introduction

The *RBTree* class uses the classical red-black tree to maintain a
sorted sequence dynamically, which supports methods like insert() and
remove().

The source code rbtree.py is highly inspired by CLRS.

*Note:* The code is written and tested in Python 3.x, however it is
compatible with Python 2.x.

** Sample

#+BEGIN_SRC python
  >>> from rbtree import RBTree
  >>> rbt = RBTree()
  >>> for x in reversed(range(10)):
  ... 	rbt.insert(x)
  ...
  >>> print (rbt) # RBTree object converted to a sorted list
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  >>> rbt.remove(0)
  >>> rbt.remove(9)
  >>> print (rbt)
  [1, 2, 3, 4, 5, 6, 7, 8]
  >>> rbt.remove(9)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "/Users/zyc/Desktop/rbtree-python/rbtree.py", line 219, in remove
      raise KeyError("Cannot find key '%s' in RBTree" % key)
  KeyError: "Cannot find key '9' in RBTree"
  >>> print (rbt[0]) # first element
  1
  >>> print (rbt[-2]) # second last element
  7
  >>> rbt = rbt[::2] # supports normal slicing, return a new RBTree object
  >>> print (rbt)
  [1, 3, 5, 7]
  >>> print (len(rbt))
  4
  >>> for x in range(10):
  ... 	rbt.insert(4)
  ...
  >>> print (rbt.lower(4)) # find number of nodes strictly less than 4
  2
  >>> print (rbt.lower_or_equal(4)) # less than or equal to 4
  12
  >>> print (rbt)
  [1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 7]

#+END_SRC